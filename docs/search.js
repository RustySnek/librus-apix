window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "librus_apix", "modulename": "librus_apix", "kind": "module", "doc": "<h1 id=\"librus-synergia-web-scraper\">Librus Synergia web scraper.</h1>\n\n<h2 id=\"general-usage\">General usage</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">librus_apix.client</span> <span class=\"kn\">import</span> <span class=\"n\">new_client</span><span class=\"p\">,</span> <span class=\"n\">Client</span><span class=\"p\">,</span> <span class=\"n\">Token</span>\n\n<span class=\"c1\"># First thing we create a new client which can be done with new_client func</span>\n<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">Client</span> <span class=\"o\">=</span> <span class=\"n\">new_client</span><span class=\"p\">()</span> <span class=\"c1\"># this creates a Client with default urls and empty Token</span>\n\n<span class=\"c1\"># Now we update the token with client.get_token(u, p)</span>\n<span class=\"n\">_token</span><span class=\"p\">:</span> <span class=\"n\">Token</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_token</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">)</span> <span class=\"c1\"># this sets and returns token attribute</span>\n\n<span class=\"c1\"># Now that we have our token updated we can work on saving it. This can be done by extracting the key.</span>\n<span class=\"c1\"># A key is a combination of 2 authorization cookies Librus uses. Format: &#39;{DZIENNIKSID:SDZIENNIKSID}&#39;</span>\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">API_Key</span> <span class=\"c1\"># can be also done with str(client.token)</span>\n\n<span class=\"c1\"># A token can be then created from such key or DZIENNIKSID/SDZIENNIKSID cookies</span>\n<span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">API_Key</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># or with cookie values</span>\n<span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">dzienniksid</span><span class=\"o\">=</span><span class=\"n\">d_id</span><span class=\"p\">,</span> <span class=\"n\">sdzienniksid</span><span class=\"o\">=</span><span class=\"n\">sd_id</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The token can then be just passed into new_client function</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">new_client</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">token</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Now that we have our client ready we can pass it into any modules function like so:</span>\n<span class=\"kn\">from</span> <span class=\"nn\">librus_apix.announcements</span> <span class=\"kn\">import</span> <span class=\"n\">get_announcements</span><span class=\"p\">,</span> <span class=\"n\">Announcement</span>\n<span class=\"n\">announcements</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Announcement</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">get_announcements</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n\n<span class=\"c1\"># If you think of hosting this on any kind of VPS, etc. You might want to setup yourself</span>\n<span class=\"c1\"># some kind of proxy, as librus tends to randomly block all known VPN, VPS ip addresses.</span>\n<span class=\"c1\"># This has nothing to do with with the library,</span>\n<span class=\"c1\"># they just happen to do it randomly for few hours at a time.</span>\n\n<span class=\"c1\"># Now you can pass proxy into your client</span>\n<span class=\"n\">proxy</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;http&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;http://my-proxy.xyz&quot;</span><span class=\"p\">}</span>\n<span class=\"c1\"># with new_client()</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">new_client</span><span class=\"p\">(</span><span class=\"n\">proxy</span><span class=\"o\">=</span><span class=\"n\">proxy</span><span class=\"p\">)</span>\n<span class=\"c1\"># with Client()</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">proxy</span><span class=\"o\">=</span><span class=\"n\">proxy</span><span class=\"p\">)</span>\n<span class=\"c1\"># or just pass it into your existing client</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">proxy</span> <span class=\"o\">=</span> <span class=\"n\">proxy</span>\n</code></pre>\n</div>\n\n<h3 id=\"in-further-docs-you-will-find-ai-slop-be-sure-to-report-any-inconsistencies-in-issues\">in further docs you will find AI slop. Be sure to report any inconsistencies in issues!</h3>\n"}, {"fullname": "librus_apix.get_version", "modulename": "librus_apix", "qualname": "get_version", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.version", "modulename": "librus_apix", "qualname": "version", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;1.0.0.dev0&#x27;"}, {"fullname": "librus_apix.announcements", "modulename": "librus_apix.announcements", "kind": "module", "doc": "<p>This module provides functions for retrieving announcements from the Librus site and parsing them into Announcement objects.</p>\n\n<p>Classes:\n    - Announcement: Represents an announcement with attributes for title, author, description, and date.</p>\n\n<p>Functions:\n    - get_announcements: Retrieves a list of announcements from the Librus API using a Client object.</p>\n\n<p>Usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">librus_apix.client</span> <span class=\"kn\">import</span> <span class=\"n\">new_client</span>\n\n<span class=\"c1\"># Create a new client instance</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">new_client</span><span class=\"p\">()</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_token</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Retrieve announcements</span>\n<span class=\"n\">announcements</span> <span class=\"o\">=</span> <span class=\"n\">get_announcements</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "librus_apix.announcements.Announcement", "modulename": "librus_apix.announcements", "qualname": "Announcement", "kind": "class", "doc": "<p>Represents an announcement.</p>\n\n<p>Attributes:\n    title (str): The title of the announcement.\n    author (str): The author of the announcement.\n    description (str): The description of the announcement.\n    date (str): The date of the announcement.</p>\n"}, {"fullname": "librus_apix.announcements.Announcement.__init__", "modulename": "librus_apix.announcements", "qualname": "Announcement.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">author</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">date</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "librus_apix.announcements.Announcement.title", "modulename": "librus_apix.announcements", "qualname": "Announcement.title", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "librus_apix.announcements.Announcement.author", "modulename": "librus_apix.announcements", "qualname": "Announcement.author", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "librus_apix.announcements.Announcement.description", "modulename": "librus_apix.announcements", "qualname": "Announcement.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "librus_apix.announcements.Announcement.date", "modulename": "librus_apix.announcements", "qualname": "Announcement.date", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "librus_apix.announcements.get_announcements", "modulename": "librus_apix.announcements", "qualname": "get_announcements", "kind": "function", "doc": "<p>Retrieves a list of announcements from the client.</p>\n\n<p>Args:\n    client (Client): The client object used to make the request.</p>\n\n<p>Returns:\n    List[Announcement]: A list of Announcement objects representing the retrieved announcements.</p>\n\n<p>Raises:\n    ParseError: If there is an error parsing the announcements.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">announcements</span><span class=\"o\">.</span><span class=\"n\">Announcement</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.attendance", "modulename": "librus_apix.attendance", "kind": "module", "doc": "<p>This module provides functions for retrieving attendance records from the Librus site, parsing them, and calculating attendance frequency.</p>\n\n<p>Classes:\n    - Attendance: Represents an attendance record with various attributes such as type, date, teacher, etc.</p>\n\n<p>Functions:\n    - get_detail: Retrieves attendance details from a specific URL suffix.\n    - get_gateway_attendance: Retrieves attendance data from the Librus gateway API.\n    - get_attendance_frequency: Calculates attendance frequency for each semester and overall.\n    - get_attendance: Retrieves attendance records from Librus based on specified sorting criteria.</p>\n\n<p>Usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">librus_apix.client</span> <span class=\"kn\">import</span> <span class=\"n\">new_client</span>\n\n<span class=\"c1\"># Create a new client instance</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">new_client</span><span class=\"p\">()</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_token</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Retrieve attendance details</span>\n<span class=\"n\">detail_url</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;example_detail_url&quot;</span>\n<span class=\"n\">attendance_details</span> <span class=\"o\">=</span> <span class=\"n\">get_detail</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">detail_url</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Retrieve attendance data from the gateway API</span>\n<span class=\"n\">gateway_attendance</span> <span class=\"o\">=</span> <span class=\"n\">get_gateway_attendance</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Calculate attendance frequency</span>\n<span class=\"n\">first_sem_freq</span><span class=\"p\">,</span> <span class=\"n\">second_sem_freq</span><span class=\"p\">,</span> <span class=\"n\">overall_freq</span> <span class=\"o\">=</span> <span class=\"n\">get_attendance_frequency</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Retrieve attendance records sorted by a specific criteria</span>\n<span class=\"n\">attendance_records</span> <span class=\"o\">=</span> <span class=\"n\">get_attendance</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">sort_by</span><span class=\"o\">=</span><span class=\"s2\">&quot;all&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "librus_apix.attendance.Attendance", "modulename": "librus_apix.attendance", "qualname": "Attendance", "kind": "class", "doc": "<p>Represents an attendance record.</p>\n\n<p>Attributes:\n    symbol (str): The symbol representing the attendance record.\n    href (str): The URL associated with the attendance record.\n    semester (int): The semester number to which the attendance record belongs.\n    date (str): The date of the attendance record.\n    type (str): The type of attendance (e.g., absence, presence).\n    teacher (str): The name of the teacher associated with the attendance record.\n    period (int): The period or hour of the attendance record.\n    excursion (bool): Indicates if the attendance record is related to an excursion.\n    topic (str): The topic or subject of the attendance record.\n    subject (str): The school subject associated with the attendance record.</p>\n"}, {"fullname": "librus_apix.attendance.Attendance.__init__", "modulename": "librus_apix.attendance", "qualname": "Attendance.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">symbol</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">href</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">semester</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">date</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">teacher</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">excursion</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">topic</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">subject</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "librus_apix.attendance.Attendance.symbol", "modulename": "librus_apix.attendance", "qualname": "Attendance.symbol", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.attendance.Attendance.href", "modulename": "librus_apix.attendance", "qualname": "Attendance.href", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.attendance.Attendance.semester", "modulename": "librus_apix.attendance", "qualname": "Attendance.semester", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "librus_apix.attendance.Attendance.date", "modulename": "librus_apix.attendance", "qualname": "Attendance.date", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.attendance.Attendance.type", "modulename": "librus_apix.attendance", "qualname": "Attendance.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.attendance.Attendance.teacher", "modulename": "librus_apix.attendance", "qualname": "Attendance.teacher", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.attendance.Attendance.period", "modulename": "librus_apix.attendance", "qualname": "Attendance.period", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "librus_apix.attendance.Attendance.excursion", "modulename": "librus_apix.attendance", "qualname": "Attendance.excursion", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "librus_apix.attendance.Attendance.topic", "modulename": "librus_apix.attendance", "qualname": "Attendance.topic", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.attendance.Attendance.subject", "modulename": "librus_apix.attendance", "qualname": "Attendance.subject", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.attendance.get_detail", "modulename": "librus_apix.attendance", "qualname": "get_detail", "kind": "function", "doc": "<p>Retrieves attendance details from the specified detail URL suffix.</p>\n\n<p>Args:\n    client (Client): The client object used to make the request.\n    detail_url (str): The URL for fetching the attendance details.</p>\n\n<p>Returns:\n    Dict[str, str]: A dictionary containing the attendance details.</p>\n\n<p>Raises:\n    ParseError: If there is an error parsing the attendance details.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>, </span><span class=\"param\"><span class=\"n\">detail_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.attendance.get_gateway_attendance", "modulename": "librus_apix.attendance", "qualname": "get_gateway_attendance", "kind": "function", "doc": "<p>Retrieves attendance data from the gateway API.</p>\n\n<p>The gateway API data is typically updated every 3 hours.\nAccessing api.librus.pl requires a private key.</p>\n\n<p>Requires:\n    oauth token to be refreshed with client.refresh_oauth()</p>\n\n<p>Args:\n    client (Client): The client object used to make the request.</p>\n\n<p>Returns:\n    List[Tuple[Tuple[str, str], str, str]]: A list of tuples containing attendance data.\n        Each tuple contains three elements:\n        1. Tuple containing type abbreviation and type name.\n        2. Lesson number.\n        3. Semester.</p>\n\n<p>Raises:\n    ValueError: If the OAuth token is missing.\n    AuthorizationError: If there is an authorization error while accessing the API.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.attendance.get_attendance_frequency", "modulename": "librus_apix.attendance", "qualname": "get_attendance_frequency", "kind": "function", "doc": "<p>Calculates the attendance frequency for each semester and overall.</p>\n\n<p>Args:\n    client (Client): The client object used to retrieve attendance data.</p>\n\n<p>Returns:\n    Tuple[float, float, float]: A tuple containing the attendance frequencies for the first semester, second semester, and overall.\n        Each frequency is a float value between 0 and 1, representing the ratio of attended lessons to total lessons.</p>\n\n<p>Raises:\n    ValueError: If there is an error retrieving attendance data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.attendance.get_attendance", "modulename": "librus_apix.attendance", "qualname": "get_attendance", "kind": "function", "doc": "<p>Retrieves attendance records from librus.</p>\n\n<p>Args:\n    client (Client): The client object used to fetch attendance data.\n    sort_by (str, optional): The sorting criteria for attendance records.\n        It can be one of the following values:\n        - \"all\": Sort by all attendance records.\n        - \"week\": Sort by attendance records for the current week.\n        - \"last_login\": Sort by attendance records since the last login.\n        Defaults to \"all\".</p>\n\n<p>Returns:\n    List[List[Attendance]]: A list containing attendance records grouped by semester.\n        Each inner list represents attendance records for a specific semester.</p>\n\n<p>Raises:\n    ArgumentError: If an invalid value is provided for the sort_by parameter.\n    ParseError: If there is an error parsing the attendance data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">sort_by</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;all&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">attendance</span><span class=\"o\">.</span><span class=\"n\">Attendance</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.client", "modulename": "librus_apix.client", "kind": "module", "doc": "<p>This module provides classes and functions for managing API tokens, handling HTTP operations, and creating client instances for interacting with the Librus API.</p>\n\n<p>Classes:\n    - Token: A class to manage and store API tokens.\n    - Client: A class to handle HTTP operations using tokens.</p>\n\n<p>Functions:\n    - new_client: Function to create a new instance of the Client class.</p>\n\n<p>Usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">my_client</span><span class=\"p\">:</span> <span class=\"n\">Client</span> <span class=\"o\">=</span> <span class=\"n\">new_client</span><span class=\"p\">()</span>\n<span class=\"n\">_token</span><span class=\"p\">:</span> <span class=\"n\">Token</span> <span class=\"o\">=</span> <span class=\"n\">my_client</span><span class=\"o\">.</span><span class=\"n\">get_token</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">)</span> <span class=\"c1\"># update the client token</span>\n\n\n<span class=\"c1\">#Alternatively, you can use the classes directly:</span>\n<span class=\"n\">my_token</span> <span class=\"o\">=</span> <span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">API_Key</span><span class=\"o\">=</span><span class=\"s2\">&quot;your_api_key&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">my_client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">my_token</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "librus_apix.client.Token", "modulename": "librus_apix.client", "qualname": "Token", "kind": "class", "doc": "<p>A class to manage and store API tokens.</p>\n\n<p>The API key should be formatted as \"{DZIENNIKSID}:{SDZIENNIKSID}\".</p>\n\n<p>Attributes:\n    API_Key (str): The combined API key.\n    csrf_token (str): CSRF token for the session.\n    oauth (str): OAuth token for the session.</p>\n\n<p>Methods:\n    _parse_api_key(API_Key: str) -> dict:\n        Parses the API key and returns a dictionary with the tokens used for cookies.\n    Raises:\n        TokenKeyError: If the API_Key is not in the correct format.</p>\n"}, {"fullname": "librus_apix.client.Token.__init__", "modulename": "librus_apix.client", "qualname": "Token.__init__", "kind": "function", "doc": "<p>Initializes the Token object with the given API key or token parts.</p>\n\n<p>Args:\n    API_Key (str, optional): The API key in the format 'DZIENNIKSID:SDZIENNIKSID'. Defaults to None.\n    dzienniks (str, optional): The first part of the API key. Defaults to None / Ignored if API_Key is passed.\n    sdzienniks (str, optional): The second part of the API key. Defaults to None / Ignored if API_Key is passed.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">API_Key</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dzienniks</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sdzienniks</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "librus_apix.client.Token.API_Key", "modulename": "librus_apix.client", "qualname": "Token.API_Key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Token.csrf_token", "modulename": "librus_apix.client", "qualname": "Token.csrf_token", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Token.oauth", "modulename": "librus_apix.client", "qualname": "Token.oauth", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Token.access_cookies", "modulename": "librus_apix.client", "qualname": "Token.access_cookies", "kind": "function", "doc": "<p>returns CookieJar containing authorization cookies.</p>\n\n<p>Returns:\n    RequestsCookieJar: A CookieJar containing the authorization cookies generated from the parsed API Key.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">cookies</span><span class=\"o\">.</span><span class=\"n\">RequestsCookieJar</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.client.Client", "modulename": "librus_apix.client", "qualname": "Client", "kind": "class", "doc": "<p>A class to handle HTTP operations using the tokens.</p>\n\n<p>Attributes:\n    token (Token): The Token object containing the API key and tokens.\n    proxy (dict): The proxy settings for the session.\n    BASE_URL (str): The base URL for the site.\n    API_URL (str): The API URL.\n    GRADES_URL (str): The URL for grades.\n    TIMETABLE_URL (str): The URL for the timetable.\n    ANNOUNCEMENTS_URL (str): The URL for announcements.\n    MESSAGE_URL (str): The URL for messages.\n    SEND_MESSAGE_URL (str): The URL for sending messages.\n    ATTENDANCE_URL (str): The URL for attendance.\n    ATTENDANCE_DETAILS_URL (str): The URL for attendance details.\n    SCHEDULE_URL (str): The URL for the schedule.\n    HOMEWORK_URL (str): The URL for homework.\n    HOMEWORK_DETAILS_URL (str): The URL for homework details.\n    INFO_URL (str): The URL for information.\n    COMPLETED_LESSONS_URL (str): The URL for completed lessons.\n    GATEWAY_API_ATTENDANCE (str): The URL for gateway API attendance.\n    RECIPIENTS_URL (str): The URL for recipients.\n    RECIPIENT_GROUPS_URL (str): The URL for recipient groups.\n    INDEX_URL (str): Url for student index\n    cookies (RequestsCookieJar): additional cookies\n    _session (Session): The requests session for making HTTP calls.</p>\n\n<p>Methods:\n    refresh_oauth() -> str:\n        Refreshes the OAuth token then returns it.\n    post(url: str, data: Dict[str, str]) -> Response:\n        Makes a POST request to the specified URL with the given data.\n    get(url: str) -> Response:\n        Makes a GET request to the specified URL.</p>\n"}, {"fullname": "librus_apix.client.Client.__init__", "modulename": "librus_apix.client", "qualname": "Client.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Token</span>,</span><span class=\"param\">\t<span class=\"n\">base_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">api_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://api.librus.pl&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">grades_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/przegladaj_oceny/uczen&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">timetable_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/przegladaj_plan_lekcji&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">announcements_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/ogloszenia&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">message_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/wiadomosci/1/5&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">send_message_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/wiadomosci/1/6&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">attendance_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/przegladaj_nb/uczen&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">attendance_details_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/przegladaj_nb/szczegoly/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">schedule_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/terminarz/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">homework_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/moje_zadania&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">homework_details_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/moje_zadania/podglad/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">info_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/informacja&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">recipients_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/getRecipients&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">recipient_groups_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/wiadomosci/2/6&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">completed_lessons_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/zrealizowane_lekcje&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">gateway_api_attendance</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/gateway/api/2.0/Attendances&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">refresh_oauth_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/refreshToken&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">index_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/uczen/index&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">proxy</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">extra_cookies</span><span class=\"p\">:</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">cookies</span><span class=\"o\">.</span><span class=\"n\">RequestsCookieJar</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">RequestsCookieJar</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "librus_apix.client.Client.token", "modulename": "librus_apix.client", "qualname": "Client.token", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Client.proxy", "modulename": "librus_apix.client", "qualname": "Client.proxy", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Client.BASE_URL", "modulename": "librus_apix.client", "qualname": "Client.BASE_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Client.API_URL", "modulename": "librus_apix.client", "qualname": "Client.API_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Client.GRADES_URL", "modulename": "librus_apix.client", "qualname": "Client.GRADES_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Client.TIMETABLE_URL", "modulename": "librus_apix.client", "qualname": "Client.TIMETABLE_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Client.ANNOUNCEMENTS_URL", "modulename": "librus_apix.client", "qualname": "Client.ANNOUNCEMENTS_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Client.MESSAGE_URL", "modulename": "librus_apix.client", "qualname": "Client.MESSAGE_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Client.SEND_MESSAGE_URL", "modulename": "librus_apix.client", "qualname": "Client.SEND_MESSAGE_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Client.ATTENDANCE_URL", "modulename": "librus_apix.client", "qualname": "Client.ATTENDANCE_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Client.ATTENDANCE_DETAILS_URL", "modulename": "librus_apix.client", "qualname": "Client.ATTENDANCE_DETAILS_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Client.SCHEDULE_URL", "modulename": "librus_apix.client", "qualname": "Client.SCHEDULE_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Client.HOMEWORK_URL", "modulename": "librus_apix.client", "qualname": "Client.HOMEWORK_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Client.HOMEWORK_DETAILS_URL", "modulename": "librus_apix.client", "qualname": "Client.HOMEWORK_DETAILS_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Client.INFO_URL", "modulename": "librus_apix.client", "qualname": "Client.INFO_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Client.COMPLETED_LESSONS_URL", "modulename": "librus_apix.client", "qualname": "Client.COMPLETED_LESSONS_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Client.GATEWAY_API_ATTENDANCE", "modulename": "librus_apix.client", "qualname": "Client.GATEWAY_API_ATTENDANCE", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Client.RECIPIENTS_URL", "modulename": "librus_apix.client", "qualname": "Client.RECIPIENTS_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Client.RECIPIENT_GROUPS_URL", "modulename": "librus_apix.client", "qualname": "Client.RECIPIENT_GROUPS_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Client.REFRESH_URL", "modulename": "librus_apix.client", "qualname": "Client.REFRESH_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Client.INDEX_URL", "modulename": "librus_apix.client", "qualname": "Client.INDEX_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Client.cookies", "modulename": "librus_apix.client", "qualname": "Client.cookies", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "librus_apix.client.Client.get_token", "modulename": "librus_apix.client", "qualname": "Client.get_token", "kind": "function", "doc": "<p>Retrieves an authentication Token class for the provided username and password.</p>\n\n<p>Args:\n    username (str): The username for authentication.\n    password (str): The password for authentication.</p>\n\n<p>Returns:\n    Token: An authentication token containing 'DZIENNIKSID' and 'SDZIENNIKSID' cookies.</p>\n\n<p>Raises:\n    MaintananceError: If the API returns a maintenance status code or message.\n    AuthorizationError: If there is an error during the authorization process.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Token</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.client.Client.refresh_oauth", "modulename": "librus_apix.client", "qualname": "Client.refresh_oauth", "kind": "function", "doc": "<p>Refreshes the OAuth token.</p>\n\n<p>Returns:\n    str: The new OAuth token.</p>\n\n<p>Raises:\n    AuthorizationError: If the token cannot be refreshed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.client.Client.post", "modulename": "librus_apix.client", "qualname": "Client.post", "kind": "function", "doc": "<p>Makes a POST request to the specified URL with the given data.</p>\n\n<p>Args:\n    url (str): The URL to send the POST request to.\n    data (Dict[str, Union[str, int]]): The data to include in the POST request.</p>\n\n<p>Returns:\n    Response: The response from the server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.client.Client.get", "modulename": "librus_apix.client", "qualname": "Client.get", "kind": "function", "doc": "<p>Makes a GET request to the specified URL.</p>\n\n<p>Args:\n    url (str): The URL to send the GET request to.</p>\n\n<p>Returns:\n    Response: The response from the server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.client.new_client", "modulename": "librus_apix.client", "qualname": "new_client", "kind": "function", "doc": "<p>Creates a new instance of the Client class.</p>\n\n<p>Args:\n    token (Optional[Token], optional): The authentication token. Defaults to None.\n    base_url (str, optional): The base URL of the API. Defaults to urls.BASE_URL.\n    api_url (str, optional): The URL of the API endpoint. Defaults to urls.API_URL.\n    grades_url (str, optional): The URL of the grades endpoint. Defaults to urls.GRADES_URL.\n    timetable_url (str, optional): The URL of the timetable endpoint. Defaults to urls.TIMETABLE_URL.\n    announcements_url (str, optional): The URL of the announcements endpoint. Defaults to urls.ANNOUNCEMENTS_URL.\n    message_url (str, optional): The URL of the message endpoint. Defaults to urls.MESSAGE_URL.\n    send_message_url (str, optional): The URL of the send message endpoint. Defaults to urls.SEND_MESSAGE_URL.\n    attendance_url (str, optional): The URL of the attendance endpoint. Defaults to urls.ATTENDANCE_URL.\n    attendance_details_url (str, optional): The URL of the attendance details endpoint. Defaults to urls.ATTENDANCE_DETAILS_URL.\n    schedule_url (str, optional): The URL of the schedule endpoint. Defaults to urls.SCHEDULE_URL.\n    homework_url (str, optional): The URL of the homework endpoint. Defaults to urls.HOMEWORK_URL.\n    homework_details_url (str, optional): The URL of the homework details endpoint. Defaults to urls.HOMEWORK_DETAILS_URL.\n    info_url (str, optional): The URL of the info endpoint. Defaults to urls.INFO_URL.\n    recipients_url (str, optional): The URL of the recipients endpoint. Defaults to urls.RECIPIENTS_URL.\n    recipient_groups_url (str, optional): The URL of the recipient groups endpoint. Defaults to urls.RECIPIENT_GROUPS_URL.\n    completed_lessons_url (str, optional): The URL of the completed lessons endpoint. Defaults to urls.COMPLETED_LESSONS_URL.\n    gateway_api_attendance (str, optional): The URL of the gateway API attendance endpoint. Defaults to urls.GATEWAY_API_ATTENDANCE.\n    refresh_oauth_url (str, optional): The URL of the refresh OAuth endpoint. Defaults to urls.REFRESH_OAUTH_URL.\n    index_url (str, optional): The url for student index\n    proxy (dict[str, str], optional): A dictionary containing proxy settings. Defaults to an empty dictionary.</p>\n\n<p>Returns:\n    Client: A new instance of the Client class.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Token</span> <span class=\"o\">=</span>,</span><span class=\"param\">\t<span class=\"n\">base_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">api_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://api.librus.pl&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">grades_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/przegladaj_oceny/uczen&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">timetable_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/przegladaj_plan_lekcji&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">announcements_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/ogloszenia&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">message_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/wiadomosci/1/5&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">send_message_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/wiadomosci/1/6&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">attendance_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/przegladaj_nb/uczen&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">attendance_details_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/przegladaj_nb/szczegoly/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">schedule_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/terminarz/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">homework_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/moje_zadania&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">homework_details_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/moje_zadania/podglad/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">info_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/informacja&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">recipients_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/getRecipients&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">recipient_groups_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/wiadomosci/2/6&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">completed_lessons_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/zrealizowane_lekcje&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">gateway_api_attendance</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/gateway/api/2.0/Attendances&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">refresh_oauth_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/refreshToken&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">index_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://synergia.librus.pl/uczen/index&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">proxy</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.completed_lessons", "modulename": "librus_apix.completed_lessons", "kind": "module", "doc": "<p>This module provides functions for managing completed lessons from the Librus site, including retrieval, parsing, and pagination.</p>\n\n<p>Classes:\n    - Lesson: Represents a completed lesson with attributes such as subject, teacher, topic, etc.</p>\n\n<p>Functions:\n    - get_max_page_number: Retrieves the maximum page number for completed lessons within a specified date range.\n    - get_completed: Retrieves completed lessons within a specified date range and page number.</p>\n\n<p>Usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">librus_apix.client</span> <span class=\"kn\">import</span> <span class=\"n\">new_client</span>\n\n<span class=\"c1\"># Create a new client instance</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">new_client</span><span class=\"p\">()</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_token</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Retrieve the maximum page number for completed lessons within a date range</span>\n<span class=\"n\">date_from</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;YYYY-MM-DD&quot;</span>\n<span class=\"n\">date_to</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;YYYY-MM-DD&quot;</span>\n<span class=\"n\">max_page_number</span> <span class=\"o\">=</span> <span class=\"n\">get_max_page_number</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">date_from</span><span class=\"p\">,</span> <span class=\"n\">date_to</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Retrieve completed lessons within a specified date range and page number</span>\n<span class=\"n\">page_number</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>  <span class=\"c1\"># Specify the page number</span>\n<span class=\"n\">completed_lessons</span> <span class=\"o\">=</span> <span class=\"n\">get_completed</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">date_from</span><span class=\"p\">,</span> <span class=\"n\">date_to</span><span class=\"p\">,</span> <span class=\"n\">page</span><span class=\"o\">=</span><span class=\"n\">page_number</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "librus_apix.completed_lessons.Lesson", "modulename": "librus_apix.completed_lessons", "qualname": "Lesson", "kind": "class", "doc": "<p>Represents a lesson.</p>\n\n<p>Attributes:\n    subject (str): The subject of the lesson.\n    teacher (str): The teacher teaching the lesson.\n    topic (str): The topic or content of the lesson.\n    z_value (str): The z in librus. No clue what it stands for.\n    attendance_symbol (str): The symbol representing attendance for the lesson.\n    attendance_href (str): The URL associated with the attendance record for the lesson.\n    lesson_number (int): The number of the lesson.\n    weekday (str): The weekday on which the lesson occurs.\n    date (str): The date of the lesson.</p>\n"}, {"fullname": "librus_apix.completed_lessons.Lesson.__init__", "modulename": "librus_apix.completed_lessons", "qualname": "Lesson.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">subject</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">teacher</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">topic</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">z_value</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">attendance_symbol</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">attendance_href</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">lesson_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">weekday</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">date</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "librus_apix.completed_lessons.Lesson.subject", "modulename": "librus_apix.completed_lessons", "qualname": "Lesson.subject", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.completed_lessons.Lesson.teacher", "modulename": "librus_apix.completed_lessons", "qualname": "Lesson.teacher", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.completed_lessons.Lesson.topic", "modulename": "librus_apix.completed_lessons", "qualname": "Lesson.topic", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.completed_lessons.Lesson.z_value", "modulename": "librus_apix.completed_lessons", "qualname": "Lesson.z_value", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.completed_lessons.Lesson.attendance_symbol", "modulename": "librus_apix.completed_lessons", "qualname": "Lesson.attendance_symbol", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.completed_lessons.Lesson.attendance_href", "modulename": "librus_apix.completed_lessons", "qualname": "Lesson.attendance_href", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.completed_lessons.Lesson.lesson_number", "modulename": "librus_apix.completed_lessons", "qualname": "Lesson.lesson_number", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "librus_apix.completed_lessons.Lesson.weekday", "modulename": "librus_apix.completed_lessons", "qualname": "Lesson.weekday", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.completed_lessons.Lesson.date", "modulename": "librus_apix.completed_lessons", "qualname": "Lesson.date", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.completed_lessons.get_max_page_number", "modulename": "librus_apix.completed_lessons", "qualname": "get_max_page_number", "kind": "function", "doc": "<p>Retrieves the maximum page number for completed lessons within a specified date range.</p>\n\n<p>Args:\n    client (Client): The client object used to fetch completed lesson data.\n    date_from (str): The start date of the date range (in format \"YYYY-MM-DD\").\n    date_to (str): The end date of the date range (in format \"YYYY-MM-DD\").</p>\n\n<p>Returns:\n    int: The maximum page number for the completed lessons within the specified date range.</p>\n\n<p>Raises:\n    ParseError: If there is an error while trying to retrieve the maximum page number.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>, </span><span class=\"param\"><span class=\"n\">date_from</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">date_to</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.completed_lessons.get_completed", "modulename": "librus_apix.completed_lessons", "qualname": "get_completed", "kind": "function", "doc": "<p>Retrieves completed lessons within a specified date range and page number.</p>\n\n<p>Args:\n    client (Client): The client object used to fetch completed lesson data.\n    date_from (str): The start date of the date range (in format \"YYYY-MM-DD\").\n    date_to (str): The end date of the date range (in format \"YYYY-MM-DD\").\n    page (int, optional): The page number of the completed lessons to retrieve.\n        Defaults to 0.</p>\n\n<p>Returns:\n    List[Lesson]: A list of Lesson objects representing the completed lessons.</p>\n\n<p>Notes:\n    - The date_from and date_to parameters do not have a limit on how far apart they can be.\n    - If date_from or date_to is empty, it returns completed lessons from the past week.\n    - Each page contains 15 lessons. The maximum number of pages can be retrieved using the get_max_page_number() function.\n    - If the specified page number exceeds the maximum, it defaults to the maximum available page.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">date_from</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">date_to</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">page</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">completed_lessons</span><span class=\"o\">.</span><span class=\"n\">Lesson</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.exceptions", "modulename": "librus_apix.exceptions", "kind": "module", "doc": "<p>This module defines custom exception classes used in the Librus API interactions for handling various error scenarios.</p>\n\n<p>Exceptions:\n    - TokenKeyError: Raised when there is an issue with the API token key.\n    - ArgumentError: Raised when an invalid argument is provided to a function.\n    - TokenError: Raised for errors related to API token management.\n    - AuthorizationError: Raised when there is an authorization error during API access.\n    - ParseError: Raised when there is an error parsing data.\n    - DateError: Raised for errors related to date handling.\n    - MaintananceError: Raised when the API is under maintenance.</p>\n"}, {"fullname": "librus_apix.exceptions.TokenKeyError", "modulename": "librus_apix.exceptions", "qualname": "TokenKeyError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "librus_apix.exceptions.ArgumentError", "modulename": "librus_apix.exceptions", "qualname": "ArgumentError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "librus_apix.exceptions.TokenError", "modulename": "librus_apix.exceptions", "qualname": "TokenError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "librus_apix.exceptions.AuthorizationError", "modulename": "librus_apix.exceptions", "qualname": "AuthorizationError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "librus_apix.exceptions.ParseError", "modulename": "librus_apix.exceptions", "qualname": "ParseError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "librus_apix.exceptions.DateError", "modulename": "librus_apix.exceptions", "qualname": "DateError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "librus_apix.exceptions.MaintananceError", "modulename": "librus_apix.exceptions", "qualname": "MaintananceError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "librus_apix.grades", "modulename": "librus_apix.grades", "kind": "module", "doc": "<p>This module defines functions and data classes for retrieving and managing grade-related data from the Librus API.</p>\n\n<p>Classes:\n    - Gpa: Represents the semestral grade for a specific semester and subject.\n    - Grade: Represents a single grade entry with detailed information.\n    - GradeDescriptive: Represents a descriptive grade entry with detailed information.</p>\n\n<p>Functions:\n    - get_grades: Fetches and returns the grades, semestral averages, and descriptive grades from Librus.</p>\n\n<p>Usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">librus_apix.grades</span> <span class=\"kn\">import</span> <span class=\"n\">get_grades</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Fetch grades data</span>\n    <span class=\"n\">numeric_grades</span><span class=\"p\">,</span> <span class=\"n\">average_grades</span><span class=\"p\">,</span> <span class=\"n\">descriptive_grades</span> <span class=\"o\">=</span> <span class=\"n\">get_grades</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">sort_by</span><span class=\"o\">=</span><span class=\"s2\">&quot;all&quot;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Process the grades data as required</span>\n    <span class=\"o\">...</span>\n<span class=\"k\">except</span> <span class=\"n\">ArgumentError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Handle invalid argument error</span>\n    <span class=\"o\">...</span>\n<span class=\"k\">except</span> <span class=\"n\">ParseError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Handle parse error</span>\n    <span class=\"o\">...</span>\n</code></pre>\n</div>\n"}, {"fullname": "librus_apix.grades.Gpa", "modulename": "librus_apix.grades", "qualname": "Gpa", "kind": "class", "doc": "<p>Represents the Semestral Grade for a specific semester and subject.</p>\n\n<p>Attributes:\n    semester (int): The semester number (e.g., 1 for first semester, 2 for second semester).\n    gpa (float | str): The GPA value, which can be a float or a \"-\" string meaning it's empty.\n    subject (str): The subject for which the GPA is calculated.</p>\n"}, {"fullname": "librus_apix.grades.Gpa.__init__", "modulename": "librus_apix.grades", "qualname": "Gpa.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">semester</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">gpa</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">subject</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "librus_apix.grades.Gpa.semester", "modulename": "librus_apix.grades", "qualname": "Gpa.semester", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "librus_apix.grades.Gpa.gpa", "modulename": "librus_apix.grades", "qualname": "Gpa.gpa", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float | str"}, {"fullname": "librus_apix.grades.Gpa.subject", "modulename": "librus_apix.grades", "qualname": "Gpa.subject", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.grades.Grade", "modulename": "librus_apix.grades", "qualname": "Grade", "kind": "class", "doc": "<p>Represents a single grade entry with detailed information.</p>\n\n<p>Attributes:\n    title (str): The title of the grade.\n    grade (str): The grade string value (e.g., '2', '4+', etc.).\n    value (float): Property function. Returns calculated float of grade. (e.g., '4.5 for 4+', '2.75 for 3-')\n    counts (bool): Indicates whether the grade counts towards the GPA.\n    date (str): The date when the grade was given.\n    href (str): A URL suffix associated with the grade.\n    desc (str): A detailed description of the grade.\n    semester (int): The semester number (e.g., 1 for first semester, 2 for second semester).\n    category (str): The category of the grade (e.g., 'Homework', 'Exam').\n    teacher (str): The name of the teacher who gave the grade.\n    weight (int): The weight of the grade in calculating the final score.</p>\n"}, {"fullname": "librus_apix.grades.Grade.__init__", "modulename": "librus_apix.grades", "qualname": "Grade.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">grade</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">counts</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">date</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">href</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">desc</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">semester</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">category</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">teacher</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "librus_apix.grades.Grade.title", "modulename": "librus_apix.grades", "qualname": "Grade.title", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.grades.Grade.grade", "modulename": "librus_apix.grades", "qualname": "Grade.grade", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.grades.Grade.counts", "modulename": "librus_apix.grades", "qualname": "Grade.counts", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "librus_apix.grades.Grade.date", "modulename": "librus_apix.grades", "qualname": "Grade.date", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.grades.Grade.href", "modulename": "librus_apix.grades", "qualname": "Grade.href", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.grades.Grade.desc", "modulename": "librus_apix.grades", "qualname": "Grade.desc", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.grades.Grade.semester", "modulename": "librus_apix.grades", "qualname": "Grade.semester", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "librus_apix.grades.Grade.category", "modulename": "librus_apix.grades", "qualname": "Grade.category", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.grades.Grade.teacher", "modulename": "librus_apix.grades", "qualname": "Grade.teacher", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.grades.Grade.weight", "modulename": "librus_apix.grades", "qualname": "Grade.weight", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "librus_apix.grades.Grade.value", "modulename": "librus_apix.grades", "qualname": "Grade.value", "kind": "variable", "doc": "<p>Calculates and returns the numeric value of the grade based on its string representation.</p>\n\n<p>Returns:\n    Union[float, str]: The numeric value of the grade or a string indicating it doesn't count.\nRaises:\n    ValueError: if grade's format is invalid ex. A+, B+ instead of 5+, 4+</p>\n", "annotation": ": Union[float, str]"}, {"fullname": "librus_apix.grades.GradeDescriptive", "modulename": "librus_apix.grades", "qualname": "GradeDescriptive", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "librus_apix.grades.GradeDescriptive.__init__", "modulename": "librus_apix.grades", "qualname": "GradeDescriptive.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">grade</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">date</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">href</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">desc</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">semester</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">teacher</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "librus_apix.grades.GradeDescriptive.title", "modulename": "librus_apix.grades", "qualname": "GradeDescriptive.title", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.grades.GradeDescriptive.grade", "modulename": "librus_apix.grades", "qualname": "GradeDescriptive.grade", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.grades.GradeDescriptive.date", "modulename": "librus_apix.grades", "qualname": "GradeDescriptive.date", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.grades.GradeDescriptive.href", "modulename": "librus_apix.grades", "qualname": "GradeDescriptive.href", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.grades.GradeDescriptive.desc", "modulename": "librus_apix.grades", "qualname": "GradeDescriptive.desc", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.grades.GradeDescriptive.semester", "modulename": "librus_apix.grades", "qualname": "GradeDescriptive.semester", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "librus_apix.grades.GradeDescriptive.teacher", "modulename": "librus_apix.grades", "qualname": "GradeDescriptive.teacher", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.grades.get_grades", "modulename": "librus_apix.grades", "qualname": "get_grades", "kind": "function", "doc": "<p>Fetches and returns the grades, semestral averages and descriptive grades from librus.</p>\n\n<p>Args:\n    client (Client): The client object used to interact with the server.\n    sort_by (str): The criteria to sort grades. Can be 'all', 'week', or 'last_login'.</p>\n\n<p>Returns:\n    Tuple: A tuple containing lists of numeric and descriptive grades, and GPA information.</p>\n\n<p>Raises:\n    ArgumentError: If an invalid sort_by value is provided.\n    ParseError: If there is an error in parsing the grades.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">sort_by</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;all&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">DefaultDict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">grades</span><span class=\"o\">.</span><span class=\"n\">Grade</span><span class=\"p\">]]],</span> <span class=\"n\">DefaultDict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">grades</span><span class=\"o\">.</span><span class=\"n\">Gpa</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">DefaultDict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">grades</span><span class=\"o\">.</span><span class=\"n\">GradeDescriptive</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.helpers", "modulename": "librus_apix.helpers", "kind": "module", "doc": "<p>This module defines a function for checking access to Librus resources by examining the content of a BeautifulSoup object.</p>\n\n<p>Functions:\n    - no_access_check: Checks for access to Librus resources by examining the content of a BeautifulSoup object.</p>\n"}, {"fullname": "librus_apix.helpers.no_access_check", "modulename": "librus_apix.helpers", "qualname": "no_access_check", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">soup</span><span class=\"p\">:</span> <span class=\"n\">bs4</span><span class=\"o\">.</span><span class=\"n\">BeautifulSoup</span></span><span class=\"return-annotation\">) -> <span class=\"n\">bs4</span><span class=\"o\">.</span><span class=\"n\">BeautifulSoup</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.homework", "modulename": "librus_apix.homework", "kind": "module", "doc": "<p>This module provides functions for retrieving homework assignments from the Librus site, parsing them, and fetching detailed information about specific assignments.</p>\n\n<p>Classes:\n    - Homework: Represents a homework assignment with detailed information such as lesson, teacher, subject, etc.</p>\n\n<p>Functions:\n    - homework_detail: Retrieves detailed information about a specific homework assignment.\n    - get_homework: Retrieves homework assignments within a specified date range.</p>\n\n<p>Usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">librus_apix.client</span> <span class=\"kn\">import</span> <span class=\"n\">new_client</span>\n\n<span class=\"c1\"># Create a new client instance</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">new_client</span><span class=\"p\">()</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_token</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Retrieve homework assignments within a specified date range</span>\n<span class=\"n\">date_from</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;YYYY-MM-DD&quot;</span>\n<span class=\"n\">date_to</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;YYYY-MM-DD&quot;</span>\n<span class=\"n\">homework_assignments</span> <span class=\"o\">=</span> <span class=\"n\">get_homework</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">date_from</span><span class=\"p\">,</span> <span class=\"n\">date_to</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Retrieve detailed information about a specific homework assignment</span>\n<span class=\"k\">for</span> <span class=\"n\">homework</span> <span class=\"ow\">in</span> <span class=\"n\">homework_assignments</span><span class=\"p\">:</span>\n    <span class=\"n\">homework_details</span> <span class=\"o\">=</span> <span class=\"n\">homework_detail</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">homework</span><span class=\"o\">.</span><span class=\"n\">href</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "librus_apix.homework.Homework", "modulename": "librus_apix.homework", "qualname": "Homework", "kind": "class", "doc": "<p>Represents a homework assignment with detailed information.</p>\n\n<p>Attributes:\n    lesson (str): The lesson or topic associated with the homework.\n    teacher (str): The name of the teacher who assigned the homework.\n    subject (str): The subject for which the homework is assigned.\n    category (str): The category or type of homework (e.g., assignment, project).\n    task_date (str): The date when the homework was assigned.\n    completion_date (str): The date by which the homework needs to be completed.\n    href (str): A URL suffix or link associated with the homework for more details.</p>\n"}, {"fullname": "librus_apix.homework.Homework.__init__", "modulename": "librus_apix.homework", "qualname": "Homework.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">lesson</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">teacher</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">subject</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">category</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">task_date</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">completion_date</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">href</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "librus_apix.homework.Homework.lesson", "modulename": "librus_apix.homework", "qualname": "Homework.lesson", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.homework.Homework.teacher", "modulename": "librus_apix.homework", "qualname": "Homework.teacher", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.homework.Homework.subject", "modulename": "librus_apix.homework", "qualname": "Homework.subject", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.homework.Homework.category", "modulename": "librus_apix.homework", "qualname": "Homework.category", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.homework.Homework.task_date", "modulename": "librus_apix.homework", "qualname": "Homework.task_date", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.homework.Homework.completion_date", "modulename": "librus_apix.homework", "qualname": "Homework.completion_date", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.homework.Homework.href", "modulename": "librus_apix.homework", "qualname": "Homework.href", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.homework.homework_detail", "modulename": "librus_apix.homework", "qualname": "homework_detail", "kind": "function", "doc": "<p>Fetches and parses detailed information about a specific homework assignment.</p>\n\n<p>Args:\n    client (Client): The client object used to interact with the server.\n    detail_url (str): The URL suffix to fetch the detailed homework information.</p>\n\n<p>Returns:\n    Dict[str, str]: A dictionary containing detailed homework information where the keys are detail labels\n                    and the values are the corresponding detail values.</p>\n\n<p>Raises:\n    ParseError: If there is an error in parsing the homework details.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>, </span><span class=\"param\"><span class=\"n\">detail_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.homework.get_homework", "modulename": "librus_apix.homework", "qualname": "get_homework", "kind": "function", "doc": "<p>Fetches and parses the list of homework assignments within a specified date range.</p>\n\n<p>Args:\n    client (Client): The client object used to interact with the server.\n    date_from (str): The start date for fetching homework assignments (format: 'YYYY-MM-DD').\n    date_to (str): The end date for fetching homework assignments (format: 'YYYY-MM-DD').</p>\n\n<p>Returns:\n    List[Homework]: A list of Homework objects representing the homework assignments within the specified date range.</p>\n\n<p>Raises:\n    ParseError: If there is an error in parsing the homework assignments.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">date_from</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">date_to</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">homework</span><span class=\"o\">.</span><span class=\"n\">Homework</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.messages", "modulename": "librus_apix.messages", "kind": "module", "doc": "<p>This module provides functions for interacting with messages in the Librus messaging system, including sending, retrieving, and parsing messages.</p>\n\n<p>Classes:\n    - Message: Represents a message with details like author, title, date, etc.\n    - MessageData: Represents the data of a message content.</p>\n\n<p>Functions:\n    - recipient_groups: Retrieves the list of recipient groups available for sending messages.\n    - get_recipients: Retrieves the recipients belonging to a specific group.\n    - send_message: Sends a message to selected recipients.\n    - message_content: Retrieves the content of a message.\n    - get_max_page_number: Retrieves the maximum page number of messages.\n    - get_received: Retrieves received messages from a specific page.\n    - get_sent: Retrieves sent messages from a specific page.</p>\n\n<p>Usage:\n    <div class=\"pdoc-code codehilite\">\n    <pre><span></span><code>    <span class=\"kn\">from</span> <span class=\"nn\">librus_apix.client</span> <span class=\"kn\">import</span> <span class=\"n\">new_client</span>\n <br />\n        <span class=\"c1\"># Create a new client instance</span>\n        <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">new_client</span><span class=\"p\">()</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_token</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">)</span>\n <br />\n        <span class=\"c1\"># Retrieve recipient groups and recipients</span>\n        <span class=\"n\">groups</span> <span class=\"o\">=</span> <span class=\"n\">recipient_groups</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">)</span>\n        <span class=\"n\">recipients</span> <span class=\"o\">=</span> <span class=\"n\">get_recipients</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">groups</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n <br />\n        <span class=\"c1\"># Send a message</span>\n        <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Test Message&quot;</span>\n        <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;This is a test message.&quot;</span>\n        <span class=\"n\">recipient_ids</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">recipients</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n        <span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">result_message</span> <span class=\"o\">=</span> <span class=\"n\">send_message</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"n\">recipient_ids</span><span class=\"p\">)</span>\n <br />\n        <span class=\"c1\"># Get received/sent messages</span>\n        <span class=\"n\">messages</span> <span class=\"o\">=</span> <span class=\"n\">get_sent</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">page</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">messages</span> <span class=\"o\">=</span> <span class=\"n\">get_received</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">page</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\"># Retrieve content of a message</span>\n        <span class=\"k\">for</span> <span class=\"n\">message</span> <span class=\"ow\">in</span> <span class=\"n\">messages</span><span class=\"p\">:</span>\n            <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">message_content</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">href</span><span class=\"p\">)</span>\n            <span class=\"o\">...</span>\n    </code></pre>\n    </div></p>\n"}, {"fullname": "librus_apix.messages.MessageData", "modulename": "librus_apix.messages", "qualname": "MessageData", "kind": "class", "doc": "<p>Represents the data of a message content.</p>\n\n<p>Attributes:\n    author (str): The author of the message.\n    title (str): The title of the message.\n    content (str): The content of the message.\n    date (str): The date when the message was sent.</p>\n"}, {"fullname": "librus_apix.messages.MessageData.__init__", "modulename": "librus_apix.messages", "qualname": "MessageData.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">author</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">date</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "librus_apix.messages.MessageData.author", "modulename": "librus_apix.messages", "qualname": "MessageData.author", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.messages.MessageData.title", "modulename": "librus_apix.messages", "qualname": "MessageData.title", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.messages.MessageData.content", "modulename": "librus_apix.messages", "qualname": "MessageData.content", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.messages.MessageData.date", "modulename": "librus_apix.messages", "qualname": "MessageData.date", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.messages.Message", "modulename": "librus_apix.messages", "qualname": "Message", "kind": "class", "doc": "<p>Represents a message.</p>\n\n<p>Attributes:\n    author (str): The author of the message.\n    title (str): The title of the message.\n    date (str): The date when the message was sent.\n    href (str): The URL reference to the message.\n    unread (bool): Indicates if the message is unread.\n    has_attachment (bool): Indicates if the message has attachments.</p>\n"}, {"fullname": "librus_apix.messages.Message.__init__", "modulename": "librus_apix.messages", "qualname": "Message.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">author</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">date</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">href</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">unread</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">has_attachment</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span>)</span>"}, {"fullname": "librus_apix.messages.Message.author", "modulename": "librus_apix.messages", "qualname": "Message.author", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.messages.Message.title", "modulename": "librus_apix.messages", "qualname": "Message.title", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.messages.Message.date", "modulename": "librus_apix.messages", "qualname": "Message.date", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.messages.Message.href", "modulename": "librus_apix.messages", "qualname": "Message.href", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.messages.Message.unread", "modulename": "librus_apix.messages", "qualname": "Message.unread", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "librus_apix.messages.Message.has_attachment", "modulename": "librus_apix.messages", "qualname": "Message.has_attachment", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "librus_apix.messages.recipient_groups", "modulename": "librus_apix.messages", "qualname": "recipient_groups", "kind": "function", "doc": "<p>Retrieves the list of recipient groups available for sending messages.</p>\n\n<p>Args:\n    client (Client): The client object for making HTTP requests.</p>\n\n<p>Returns:\n    List[str]: A list of recipient group identifiers.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.messages.get_recipients", "modulename": "librus_apix.messages", "qualname": "get_recipients", "kind": "function", "doc": "<p>Retrieves the recipients belonging to a specific group.</p>\n\n<p>Args:\n    client (Client): The client object for making HTTP requests.\n    group (str): The identifier of the recipient group.</p>\n\n<p>Returns:\n    dict: A dictionary mapping teacher names to their IDs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>, </span><span class=\"param\"><span class=\"n\">group</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.messages.send_message", "modulename": "librus_apix.messages", "qualname": "send_message", "kind": "function", "doc": "<p>Sends a message to selected recipients.</p>\n\n<p>Args:\n    client (Client): The client object for making HTTP requests.\n    title (str): The title of the message.\n    content (str): The content of the message.\n    recipient_ids (list[str]): The list of recipient IDs.</p>\n\n<p>Returns:\n    Tuple[bool, str]: A tuple indicating whether the message was sent successfully\n    and the result message.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">recipient_ids</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.messages.unwrap_message_data", "modulename": "librus_apix.messages", "qualname": "unwrap_message_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tr</span><span class=\"p\">:</span> <span class=\"n\">bs4</span><span class=\"o\">.</span><span class=\"n\">element</span><span class=\"o\">.</span><span class=\"n\">Tag</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.messages.message_content", "modulename": "librus_apix.messages", "qualname": "message_content", "kind": "function", "doc": "<p>Retrieves the content of a message.</p>\n\n<p>Args:\n    client (Client): The client object for making HTTP requests.\n    content_url (str): The URL of the message content.</p>\n\n<p>Returns:\n    MessageData: An object containing the message details.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">content_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MessageData</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.messages.parse_sent", "modulename": "librus_apix.messages", "qualname": "parse_sent", "kind": "function", "doc": "<p>Parses sent messages from the message soup.</p>\n\n<p>Args:\n    message_soup (BeautifulSoup): The BeautifulSoup object containing message data.</p>\n\n<p>Returns:\n    List[Message]: A list of Message objects representing sent messages.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message_soup</span><span class=\"p\">:</span> <span class=\"n\">bs4</span><span class=\"o\">.</span><span class=\"n\">BeautifulSoup</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">Message</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.messages.parse", "modulename": "librus_apix.messages", "qualname": "parse", "kind": "function", "doc": "<p>Parses received messages from the message soup.</p>\n\n<p>Args:\n    message_soup (BeautifulSoup): The BeautifulSoup object containing message data.</p>\n\n<p>Returns:\n    List[Message]: A list of Message objects representing received messages.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message_soup</span><span class=\"p\">:</span> <span class=\"n\">bs4</span><span class=\"o\">.</span><span class=\"n\">BeautifulSoup</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">Message</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.messages.get_max_page_number", "modulename": "librus_apix.messages", "qualname": "get_max_page_number", "kind": "function", "doc": "<p>Retrieves the maximum page number of messages.</p>\n\n<p>Args:\n    client (Client): The client object for making HTTP requests.</p>\n\n<p>Returns:\n    int: The maximum page number.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.messages.get_received", "modulename": "librus_apix.messages", "qualname": "get_received", "kind": "function", "doc": "<p>Retrieves received messages from a specific page.</p>\n\n<p>Args:\n    client (Client): The client object for making HTTP requests.\n    page (int): The page number of messages to retrieve.</p>\n\n<p>Returns:\n    List[Message]: A list of received Message objects.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">page</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">Message</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.messages.get_sent", "modulename": "librus_apix.messages", "qualname": "get_sent", "kind": "function", "doc": "<p>Retrieves sent messages from a specific page.</p>\n\n<p>Args:\n    client (Client): The client object for making HTTP requests.\n    page (int): The page number of messages to retrieve.</p>\n\n<p>Returns:\n    List[Message]: A list of sent Message objects.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">page</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">Message</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.notifications", "modulename": "librus_apix.notifications", "kind": "module", "doc": "<p>This module provides functionality to interact with the Librus site and extract notifications from the user's dashboard.</p>\n\n<p>The notification bubbles are bound to token, and their amount doesn't change unless you retrieve a new Token, hence we have to\nrequest every individual last_login endpoint and retrieve stuff from there.</p>\n\n<p>Classes:\n    - NotificationAmount: Represents a notification with a destination and an amount.\n    - NotificationData: Represents data of various notifications including grades, attendance, messages, announcements, schedule, and homework.\n    - NotificationIds: Represents the IDs of various notifications to track seen notifications.</p>\n\n<p>Functions:\n    - get_initial_notification_data(client: Client) -> Tuple[NotificationData, NotificationIds]: Fetches and parses the initial notification data and their IDs for a new token.\n    - get_new_notification_data(client: Client, seen_notifications: NotificationIds) -> Tuple[NotificationData, NotificationIds]: Fetches and parses new notifications using NotificationIds, returns data and updates seen notification IDs.</p>\n"}, {"fullname": "librus_apix.notifications.NotificationAmount", "modulename": "librus_apix.notifications", "qualname": "NotificationAmount", "kind": "class", "doc": "<p>Represents a notification with a destination identifier name and an amount.</p>\n\n<p>Attributes:\n    name (str): Str representation of name ex: Oceny\n    destination (str): endpoint\n    amount (int): The count of notifications for the given destination.</p>\n"}, {"fullname": "librus_apix.notifications.NotificationAmount.__init__", "modulename": "librus_apix.notifications", "qualname": "NotificationAmount.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">destination</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">amount</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "librus_apix.notifications.NotificationAmount.name", "modulename": "librus_apix.notifications", "qualname": "NotificationAmount.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.notifications.NotificationAmount.destination", "modulename": "librus_apix.notifications", "qualname": "NotificationAmount.destination", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.notifications.NotificationAmount.amount", "modulename": "librus_apix.notifications", "qualname": "NotificationAmount.amount", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "librus_apix.notifications.get_new_token_notification_amounts", "modulename": "librus_apix.notifications", "qualname": "get_new_token_notification_amounts", "kind": "function", "doc": "<p>Fetches and parses notification amounts from the user's dashboard on the Librus platform.</p>\n\n<p>Args:\n    client (Client): An instance of <code>librus_apix.client.Client</code> used to make requests to the Librus platform.</p>\n\n<p>Returns:\n    List[NotificationAmount]: A list of <code>NotificationAmount</code> objects representing the notifications found on the user's dashboard.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">notifications</span><span class=\"o\">.</span><span class=\"n\">NotificationAmount</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.notifications.parse_basic_amount", "modulename": "librus_apix.notifications", "qualname": "parse_basic_amount", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">amount</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">notifications</span><span class=\"o\">.</span><span class=\"n\">NotificationAmount</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.notifications.NotificationData", "modulename": "librus_apix.notifications", "qualname": "NotificationData", "kind": "class", "doc": "<p>Represents data of various notifications.</p>\n\n<p>Attributes:\n    grades (List[Grade]): A list of grade notifications.\n    attendance (List[Attendance]): A list of attendance notifications.\n    messages (List[Message]): A list of message notifications.\n    announcements (List[Announcement]): A list of announcement notifications.\n    schedule (List[Event]): A list of schedule notifications.\n    homework (List[Homework]): A list of homework notifications.</p>\n"}, {"fullname": "librus_apix.notifications.NotificationData.__init__", "modulename": "librus_apix.notifications", "qualname": "NotificationData.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grades</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">grades</span><span class=\"o\">.</span><span class=\"n\">Grade</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">attendance</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">attendance</span><span class=\"o\">.</span><span class=\"n\">Attendance</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">messages</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">Message</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">announcements</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">announcements</span><span class=\"o\">.</span><span class=\"n\">Announcement</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">schedule</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">schedule</span><span class=\"o\">.</span><span class=\"n\">Event</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">homework</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">homework</span><span class=\"o\">.</span><span class=\"n\">Homework</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "librus_apix.notifications.NotificationData.grades", "modulename": "librus_apix.notifications", "qualname": "NotificationData.grades", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[librus_apix.grades.Grade]"}, {"fullname": "librus_apix.notifications.NotificationData.attendance", "modulename": "librus_apix.notifications", "qualname": "NotificationData.attendance", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[librus_apix.attendance.Attendance]"}, {"fullname": "librus_apix.notifications.NotificationData.messages", "modulename": "librus_apix.notifications", "qualname": "NotificationData.messages", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[librus_apix.messages.Message]"}, {"fullname": "librus_apix.notifications.NotificationData.announcements", "modulename": "librus_apix.notifications", "qualname": "NotificationData.announcements", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[librus_apix.announcements.Announcement]"}, {"fullname": "librus_apix.notifications.NotificationData.schedule", "modulename": "librus_apix.notifications", "qualname": "NotificationData.schedule", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[librus_apix.schedule.Event]"}, {"fullname": "librus_apix.notifications.NotificationData.homework", "modulename": "librus_apix.notifications", "qualname": "NotificationData.homework", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[librus_apix.homework.Homework]"}, {"fullname": "librus_apix.notifications.NotificationIds", "modulename": "librus_apix.notifications", "qualname": "NotificationIds", "kind": "class", "doc": "<p>Represents the IDs (mostly .href) of various notifications to track seen notifications.</p>\n\n<p>Attributes:\n    grades (List[str]): A list of grade notification IDs.\n    attendance (List[str]): A list of attendance notification IDs.\n    messages (List[str]): A list of message notification IDs.\n    announcements (List[str]): A list of announcement notification IDs (title+data) concat.\n    schedule (List[str]): A list of schedule notification IDs.\n    homework (List[str]): A list of homework notification IDs.</p>\n"}, {"fullname": "librus_apix.notifications.NotificationIds.__init__", "modulename": "librus_apix.notifications", "qualname": "NotificationIds.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grades</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">attendance</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">messages</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">announcements</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">schedule</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">homework</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "librus_apix.notifications.NotificationIds.grades", "modulename": "librus_apix.notifications", "qualname": "NotificationIds.grades", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "librus_apix.notifications.NotificationIds.attendance", "modulename": "librus_apix.notifications", "qualname": "NotificationIds.attendance", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "librus_apix.notifications.NotificationIds.messages", "modulename": "librus_apix.notifications", "qualname": "NotificationIds.messages", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "librus_apix.notifications.NotificationIds.announcements", "modulename": "librus_apix.notifications", "qualname": "NotificationIds.announcements", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "librus_apix.notifications.NotificationIds.schedule", "modulename": "librus_apix.notifications", "qualname": "NotificationIds.schedule", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "librus_apix.notifications.NotificationIds.homework", "modulename": "librus_apix.notifications", "qualname": "NotificationIds.homework", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "librus_apix.notifications.get_initial_notification_data", "modulename": "librus_apix.notifications", "qualname": "get_initial_notification_data", "kind": "function", "doc": "<p>Fetches and parses the initial notification data and their IDs for a new token.\n! Should only be ran once on every new Token. The notifications are stored inside Token and won't update.</p>\n\n<p>Args:\n    client (Client): An instance of <code>librus_apix.client.Client</code>.</p>\n\n<p>Returns:\n    Tuple[NotificationData, NotificationIds]: A tuple containing the initial notification data and their IDs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.notifications.get_new_notification_data", "modulename": "librus_apix.notifications", "qualname": "get_new_notification_data", "kind": "function", "doc": "<p>Fetches and parses new notification data and updates seen notification IDs based on given NotificationIds.</p>\n\n<p>Args:\n    client (Client): An instance of <code>librus_apix.client.Client</code>.\n    seen_notifications (NotificationIds): A <code>NotificationIds</code> object representing the seen notifications.</p>\n\n<p>Returns:\n    Tuple[NotificationData, NotificationIds]: A tuple containing the new notification data and updated seen notification IDs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">seen_notifications</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">notifications</span><span class=\"o\">.</span><span class=\"n\">NotificationIds</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.schedule", "modulename": "librus_apix.schedule", "kind": "module", "doc": "<p>This module provides functions for retrieving schedule information from the Librus site, parsing it, and formatting it into a structured representation.</p>\n\n<p>Classes:\n    - Event: Represents an event in the schedule with various attributes like title, subject, day, etc.</p>\n\n<p>Functions:\n    - schedule_detail: Fetches detailed schedule information for a specific prefix and detail URL suffix.\n    - get_schedule: Fetches the schedule for a specific month and year.</p>\n\n<p>Usage:\n    <div class=\"pdoc-code codehilite\">\n    <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">librus_apix.client</span> <span class=\"kn\">import</span> <span class=\"n\">new_client</span>\n <br />\n    <span class=\"c1\"># Create a new client instance</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">new_client</span><span class=\"p\">()</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_token</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">)</span>\n <br />\n <br />\n    <span class=\"c1\"># Fetch the schedule for a specific month and year</span>\n    <span class=\"n\">month</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;01&quot;</span>\n    <span class=\"n\">year</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;2024&quot;</span>\n    <span class=\"n\">include_empty</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">monthly_schedule</span> <span class=\"o\">=</span> <span class=\"n\">get_schedule</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">month</span><span class=\"p\">,</span> <span class=\"n\">year</span><span class=\"p\">,</span> <span class=\"n\">include_empty</span><span class=\"p\">)</span>\n <br />\n    <span class=\"c1\"># Fetch detailed schedule information</span>\n    <span class=\"n\">day_one</span> <span class=\"o\">=</span> <span class=\"n\">monthly_schedule</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">href</span>\n    <span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"n\">suffix</span> <span class=\"o\">=</span> <span class=\"n\">day_one</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">detailed_schedule</span> <span class=\"o\">=</span> <span class=\"n\">schedule_detail</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"n\">detail_url</span><span class=\"p\">)</span>\n    </code></pre>\n    </div></p>\n"}, {"fullname": "librus_apix.schedule.Event", "modulename": "librus_apix.schedule", "qualname": "Event", "kind": "class", "doc": "<p>Represents an event in the schedule.</p>\n\n<p>Attributes:\n    title (str): The title of the event.\n    subject (str): The subject of the event.\n    data (dict): Additional data associated with the event.\n    day (str): The day on which the event occurs.\n    number (Union[int, str]): The number associated with the event.\n    hour (str): The hour at which the event occurs.\n    href (str): 'prefix'/'suffix' joined with a slash (this should be reworked...).</p>\n"}, {"fullname": "librus_apix.schedule.Event.__init__", "modulename": "librus_apix.schedule", "qualname": "Event.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">subject</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">day</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">hour</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">href</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "librus_apix.schedule.Event.title", "modulename": "librus_apix.schedule", "qualname": "Event.title", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.schedule.Event.subject", "modulename": "librus_apix.schedule", "qualname": "Event.subject", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.schedule.Event.data", "modulename": "librus_apix.schedule", "qualname": "Event.data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "librus_apix.schedule.Event.day", "modulename": "librus_apix.schedule", "qualname": "Event.day", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.schedule.Event.number", "modulename": "librus_apix.schedule", "qualname": "Event.number", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[int, str]"}, {"fullname": "librus_apix.schedule.Event.hour", "modulename": "librus_apix.schedule", "qualname": "Event.hour", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.schedule.Event.href", "modulename": "librus_apix.schedule", "qualname": "Event.href", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.schedule.schedule_detail", "modulename": "librus_apix.schedule", "qualname": "schedule_detail", "kind": "function", "doc": "<p>Fetches the detailed schedule information for a specific prefix and detail URL suffix.</p>\n\n<p>Args:\n    client (Client): The client object for making HTTP requests.\n    prefix (str): The prefix of the schedule URL.\n    detail_url (str): The detail URL of the schedule.</p>\n\n<p>Returns:\n    Dict[str, str]: A dictionary containing schedule details.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">detail_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.schedule.get_schedule", "modulename": "librus_apix.schedule", "qualname": "get_schedule", "kind": "function", "doc": "<p>Fetches the schedule for a specific month and year.</p>\n\n<p>Args:\n    client (Client): The client object for making HTTP requests.\n    month (str): The month for which the schedule is requested.\n    year (str): The year for which the schedule is requested.\n    include_empty (bool, optional): Flag to include empty schedules. Defaults to False.</p>\n\n<p>Returns:\n    DefaultDict[int, List[Event]]: A dictionary containing the schedule for each day of the month.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">month</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">include_empty</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">DefaultDict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">schedule</span><span class=\"o\">.</span><span class=\"n\">Event</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.student_information", "modulename": "librus_apix.student_information", "kind": "module", "doc": "<p>This module provides functions for retrieving student information from the Librus system, parsing it, and formatting it into a structured representation.</p>\n\n<p>Classes:\n    - StudentInformation: Represents student information with attributes such as name, class name, student number, etc.</p>\n\n<p>Functions:\n    - get_student_information: Retrieves student information from Librus.</p>\n\n<p>Usage:\n    <div class=\"pdoc-code codehilite\">\n    <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">librus_apix.client</span> <span class=\"kn\">import</span> <span class=\"n\">new_client</span>\n <br />\n    <span class=\"c1\"># Create a new client instance</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">new_client</span><span class=\"p\">()</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_token</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">)</span>\n <br />\n    <span class=\"c1\"># Fetch student information</span>\n    <span class=\"n\">student_info</span> <span class=\"o\">=</span> <span class=\"n\">get_student_information</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">student_info</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">student_info</span><span class=\"o\">.</span><span class=\"n\">class_name</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">student_info</span><span class=\"o\">.</span><span class=\"n\">number</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">student_info</span><span class=\"o\">.</span><span class=\"n\">tutor</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">student_info</span><span class=\"o\">.</span><span class=\"n\">school</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">student_info</span><span class=\"o\">.</span><span class=\"n\">lucky_number</span><span class=\"p\">)</span>\n    </code></pre>\n    </div></p>\n"}, {"fullname": "librus_apix.student_information.StudentInformation", "modulename": "librus_apix.student_information", "qualname": "StudentInformation", "kind": "class", "doc": "<p>Represents student information.</p>\n\n<p>Attributes:\n    name (str): The name of the student.\n    class_name (str): The class name of the student.\n    number (int): The student number.\n    tutor (str): The tutor of the student.\n    school (str): The school of the student.\n    lucky_number (Union[int, str]): The lucky number of the student, if available.</p>\n"}, {"fullname": "librus_apix.student_information.StudentInformation.__init__", "modulename": "librus_apix.student_information", "qualname": "StudentInformation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">class_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">tutor</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">school</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">lucky_number</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "librus_apix.student_information.StudentInformation.name", "modulename": "librus_apix.student_information", "qualname": "StudentInformation.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.student_information.StudentInformation.class_name", "modulename": "librus_apix.student_information", "qualname": "StudentInformation.class_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.student_information.StudentInformation.number", "modulename": "librus_apix.student_information", "qualname": "StudentInformation.number", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "librus_apix.student_information.StudentInformation.tutor", "modulename": "librus_apix.student_information", "qualname": "StudentInformation.tutor", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.student_information.StudentInformation.school", "modulename": "librus_apix.student_information", "qualname": "StudentInformation.school", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.student_information.StudentInformation.lucky_number", "modulename": "librus_apix.student_information", "qualname": "StudentInformation.lucky_number", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[int, str]"}, {"fullname": "librus_apix.student_information.get_student_information", "modulename": "librus_apix.student_information", "qualname": "get_student_information", "kind": "function", "doc": "<p>Retrieves student information from librus.</p>\n\n<p>Args:\n    client (Client): The client object for making HTTP requests.</p>\n\n<p>Returns:\n    StudentInformation: An object containing the student's information.</p>\n\n<p>Raises:\n    ParseError: If there is an error while parsing or retrieving student information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.timetable", "modulename": "librus_apix.timetable", "kind": "module", "doc": "<p>Module: timetable_parser</p>\n\n<p>Description:\nThis module provides functions for parsing and retrieving timetable data from an educational institution's website.</p>\n\n<p>Classes:\n    - Period: Represents a period of a class with relevant information.</p>\n\n<p>Functions:\n    - get_timetable: Retrieves the timetable for a given week starting from a Monday date.</p>\n\n<p>Exceptions:\n    - DateError: Raised when the provided date is not a Monday.\n    - ParseError: Raised when there's an error while parsing the timetable.</p>\n\n<p>Usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">your_client_module</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>  <span class=\"c1\"># import your client module here</span>\n\n<span class=\"c1\"># Example usage:</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">()</span>  <span class=\"c1\"># initialize your client</span>\n<span class=\"n\">monday_date</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2024</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">)</span>  <span class=\"c1\"># example Monday date</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">timetable</span> <span class=\"o\">=</span> <span class=\"n\">get_timetable</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">monday_date</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">day</span> <span class=\"ow\">in</span> <span class=\"n\">timetable</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">period</span> <span class=\"ow\">in</span> <span class=\"n\">day</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">period</span><span class=\"o\">.</span><span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">period</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">period</span><span class=\"o\">.</span><span class=\"n\">date_from</span><span class=\"p\">,</span> <span class=\"n\">period</span><span class=\"o\">.</span><span class=\"n\">date_to</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">DateError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">ParseError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "librus_apix.timetable.Period", "modulename": "librus_apix.timetable", "qualname": "Period", "kind": "class", "doc": "<p>Represents a period of a class with relevant information.</p>\n\n<p>Attributes:\n    subject (str): The subject of the class.\n    teacher_and_classroom (str): Combined information of teacher and classroom.\n    date (str): The date of the period.\n    date_from (str): Starting time of the period.\n    date_to (str): Ending time of the period.\n    weekday (str): The day of the week of the period.\n    info (Dict[str, str]): Additional information about the period.\n    number (int): The number of the period within a day.\n    next_recess_from (str | None): Starting time of the next recess, if any.\n    next_recess_to (str | None): Ending time of the next recess, if any.</p>\n"}, {"fullname": "librus_apix.timetable.Period.__init__", "modulename": "librus_apix.timetable", "qualname": "Period.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">subject</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">teacher_and_classroom</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">date</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">date_from</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">date_to</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">weekday</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">next_recess_from</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">next_recess_to</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "librus_apix.timetable.Period.subject", "modulename": "librus_apix.timetable", "qualname": "Period.subject", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.timetable.Period.teacher_and_classroom", "modulename": "librus_apix.timetable", "qualname": "Period.teacher_and_classroom", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.timetable.Period.date", "modulename": "librus_apix.timetable", "qualname": "Period.date", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.timetable.Period.date_from", "modulename": "librus_apix.timetable", "qualname": "Period.date_from", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.timetable.Period.date_to", "modulename": "librus_apix.timetable", "qualname": "Period.date_to", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.timetable.Period.weekday", "modulename": "librus_apix.timetable", "qualname": "Period.weekday", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "librus_apix.timetable.Period.info", "modulename": "librus_apix.timetable", "qualname": "Period.info", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, str]"}, {"fullname": "librus_apix.timetable.Period.number", "modulename": "librus_apix.timetable", "qualname": "Period.number", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "librus_apix.timetable.Period.next_recess_from", "modulename": "librus_apix.timetable", "qualname": "Period.next_recess_from", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "librus_apix.timetable.Period.next_recess_to", "modulename": "librus_apix.timetable", "qualname": "Period.next_recess_to", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "librus_apix.timetable.get_timetable", "modulename": "librus_apix.timetable", "qualname": "get_timetable", "kind": "function", "doc": "<p>Retrieves the timetable for a given week starting from a Monday date.</p>\n\n<p>Args:\n    client (Client): An instance of the client class for fetching data.\n    monday_date (datetime): The Monday date for the week's timetable.</p>\n\n<p>Returns:\n    List[List[Period]]: A nested list containing periods for each day of the week.</p>\n\n<p>Raises:\n    DateError: If the provided date is not a Monday.\n    ParseError: If there's an error while parsing the timetable.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span>,</span><span class=\"param\">\t<span class=\"n\">monday_date</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">librus_apix</span><span class=\"o\">.</span><span class=\"n\">timetable</span><span class=\"o\">.</span><span class=\"n\">Period</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "librus_apix.urls", "modulename": "librus_apix.urls", "kind": "module", "doc": "<p>Constants:\n    <div class=\"pdoc-code codehilite\">\n    <pre><span></span><code><span class=\"o\">-</span> <span class=\"n\">HEADERS</span><span class=\"p\">:</span> <span class=\"n\">A</span> <span class=\"n\">dictionary</span> <span class=\"n\">containing</span> <span class=\"n\">HTTP</span> <span class=\"n\">headers</span> <span class=\"k\">for</span> <span class=\"n\">making</span> <span class=\"n\">requests</span><span class=\"o\">.</span>\n    <span class=\"o\">-</span> <span class=\"n\">BASE_URL</span><span class=\"p\">:</span> <span class=\"n\">The</span> <span class=\"n\">base</span> <span class=\"n\">URL</span> <span class=\"k\">for</span> <span class=\"n\">the</span> <span class=\"n\">Librus</span> <span class=\"n\">website</span><span class=\"o\">.</span>\n    <span class=\"o\">-</span> <span class=\"n\">API_URL</span><span class=\"p\">:</span> <span class=\"n\">The</span> <span class=\"n\">base</span> <span class=\"n\">URL</span> <span class=\"k\">for</span> <span class=\"n\">the</span> <span class=\"n\">Librus</span> <span class=\"n\">API</span><span class=\"o\">.</span>\n    <span class=\"o\">-</span> <span class=\"n\">INDEX_URL</span><span class=\"p\">:</span> <span class=\"n\">Student</span> <span class=\"n\">Index</span> <span class=\"n\">url</span>\n    <span class=\"o\">-</span> <span class=\"n\">GRADES_URL</span><span class=\"p\">:</span> <span class=\"n\">URL</span> <span class=\"k\">for</span> <span class=\"n\">accessing</span> <span class=\"n\">grades</span><span class=\"o\">.</span>\n    <span class=\"o\">-</span> <span class=\"n\">TIMETABLE_URL</span><span class=\"p\">:</span> <span class=\"n\">URL</span> <span class=\"k\">for</span> <span class=\"n\">accessing</span> <span class=\"n\">the</span> <span class=\"n\">timetable</span><span class=\"o\">.</span>\n    <span class=\"o\">-</span> <span class=\"n\">ANNOUNCEMENTS_URL</span><span class=\"p\">:</span> <span class=\"n\">URL</span> <span class=\"k\">for</span> <span class=\"n\">accessing</span> <span class=\"n\">announcements</span><span class=\"o\">.</span>\n    <span class=\"o\">-</span> <span class=\"n\">MESSAGE_URL</span><span class=\"p\">:</span> <span class=\"n\">URL</span> <span class=\"k\">for</span> <span class=\"n\">accessing</span> <span class=\"n\">messages</span><span class=\"o\">.</span>\n    <span class=\"o\">-</span> <span class=\"n\">RECIPIENT_GROUPS_URL</span><span class=\"p\">:</span> <span class=\"n\">URL</span> <span class=\"k\">for</span> <span class=\"n\">retrieving</span> <span class=\"n\">recipient</span> <span class=\"n\">groups</span> <span class=\"k\">for</span> <span class=\"n\">messages</span><span class=\"o\">.</span>\n    <span class=\"o\">-</span> <span class=\"n\">RECIPIENTS_URL</span><span class=\"p\">:</span> <span class=\"n\">URL</span> <span class=\"k\">for</span> <span class=\"n\">retrieving</span> <span class=\"n\">recipients</span> <span class=\"k\">for</span> <span class=\"n\">messages</span><span class=\"o\">.</span>\n    <span class=\"o\">-</span> <span class=\"n\">SEND_MESSAGE_URL</span><span class=\"p\">:</span> <span class=\"n\">URL</span> <span class=\"k\">for</span> <span class=\"n\">sending</span> <span class=\"n\">messages</span><span class=\"o\">.</span>\n    <span class=\"o\">-</span> <span class=\"n\">ATTENDANCE_URL</span><span class=\"p\">:</span> <span class=\"n\">URL</span> <span class=\"k\">for</span> <span class=\"n\">accessing</span> <span class=\"n\">attendance</span> <span class=\"n\">information</span><span class=\"o\">.</span>\n    <span class=\"o\">-</span> <span class=\"n\">ATTENDANCE_DETAILS_URL</span><span class=\"p\">:</span> <span class=\"n\">URL</span> <span class=\"k\">for</span> <span class=\"n\">accessing</span> <span class=\"n\">detailed</span> <span class=\"n\">attendance</span> <span class=\"n\">information</span><span class=\"o\">.</span>\n    <span class=\"o\">-</span> <span class=\"n\">SCHEDULE_URL</span><span class=\"p\">:</span> <span class=\"n\">URL</span> <span class=\"k\">for</span> <span class=\"n\">accessing</span> <span class=\"n\">the</span> <span class=\"n\">schedule</span><span class=\"o\">.</span>\n    <span class=\"o\">-</span> <span class=\"n\">HOMEWORK_URL</span><span class=\"p\">:</span> <span class=\"n\">URL</span> <span class=\"k\">for</span> <span class=\"n\">accessing</span> <span class=\"n\">homework</span><span class=\"o\">.</span>\n    <span class=\"o\">-</span> <span class=\"n\">HOMEWORK_DETAILS_URL</span><span class=\"p\">:</span> <span class=\"n\">URL</span> <span class=\"k\">for</span> <span class=\"n\">accessing</span> <span class=\"n\">detailed</span> <span class=\"n\">homework</span> <span class=\"n\">information</span><span class=\"o\">.</span>\n    <span class=\"o\">-</span> <span class=\"n\">INFO_URL</span><span class=\"p\">:</span> <span class=\"n\">URL</span> <span class=\"k\">for</span> <span class=\"n\">accessing</span> <span class=\"n\">information</span><span class=\"o\">.</span>\n    <span class=\"o\">-</span> <span class=\"n\">COMPLETED_LESSONS_URL</span><span class=\"p\">:</span> <span class=\"n\">URL</span> <span class=\"k\">for</span> <span class=\"n\">accessing</span> <span class=\"n\">completed</span> <span class=\"n\">lessons</span><span class=\"o\">.</span>\n    <span class=\"o\">-</span> <span class=\"n\">GATEWAY_API_ATTENDANCE</span><span class=\"p\">:</span> <span class=\"n\">URL</span> <span class=\"k\">for</span> <span class=\"n\">accessing</span> <span class=\"n\">attendance</span> <span class=\"n\">data</span> <span class=\"n\">via</span> <span class=\"n\">the</span> <span class=\"n\">gateway</span> <span class=\"n\">API</span><span class=\"o\">.</span>\n    <span class=\"o\">-</span> <span class=\"n\">REFRESH_OAUTH_URL</span><span class=\"p\">:</span> <span class=\"n\">URL</span> <span class=\"k\">for</span> <span class=\"n\">refreshing</span> <span class=\"n\">OAuth</span> <span class=\"n\">tokens</span><span class=\"o\">.</span>\n    </code></pre>\n    </div></p>\n"}, {"fullname": "librus_apix.urls.HEADERS", "modulename": "librus_apix.urls", "qualname": "HEADERS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Union[str, bytes]]", "default_value": "{&#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT x.y; Win64; x64; rv:10.0) Gecko/20100101 Firefox/10.0&#x27;, &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;}"}, {"fullname": "librus_apix.urls.BASE_URL", "modulename": "librus_apix.urls", "qualname": "BASE_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://synergia.librus.pl&#x27;"}, {"fullname": "librus_apix.urls.API_URL", "modulename": "librus_apix.urls", "qualname": "API_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://api.librus.pl&#x27;"}, {"fullname": "librus_apix.urls.INDEX_URL", "modulename": "librus_apix.urls", "qualname": "INDEX_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://synergia.librus.pl/uczen/index&#x27;"}, {"fullname": "librus_apix.urls.GRADES_URL", "modulename": "librus_apix.urls", "qualname": "GRADES_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://synergia.librus.pl/przegladaj_oceny/uczen&#x27;"}, {"fullname": "librus_apix.urls.TIMETABLE_URL", "modulename": "librus_apix.urls", "qualname": "TIMETABLE_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://synergia.librus.pl/przegladaj_plan_lekcji&#x27;"}, {"fullname": "librus_apix.urls.ANNOUNCEMENTS_URL", "modulename": "librus_apix.urls", "qualname": "ANNOUNCEMENTS_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://synergia.librus.pl/ogloszenia&#x27;"}, {"fullname": "librus_apix.urls.MESSAGE_URL", "modulename": "librus_apix.urls", "qualname": "MESSAGE_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://synergia.librus.pl/wiadomosci/1/5&#x27;"}, {"fullname": "librus_apix.urls.RECIPIENT_GROUPS_URL", "modulename": "librus_apix.urls", "qualname": "RECIPIENT_GROUPS_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://synergia.librus.pl/wiadomosci/2/6&#x27;"}, {"fullname": "librus_apix.urls.RECIPIENTS_URL", "modulename": "librus_apix.urls", "qualname": "RECIPIENTS_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://synergia.librus.pl/getRecipients&#x27;"}, {"fullname": "librus_apix.urls.SEND_MESSAGE_URL", "modulename": "librus_apix.urls", "qualname": "SEND_MESSAGE_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://synergia.librus.pl/wiadomosci/1/6&#x27;"}, {"fullname": "librus_apix.urls.ATTENDANCE_URL", "modulename": "librus_apix.urls", "qualname": "ATTENDANCE_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://synergia.librus.pl/przegladaj_nb/uczen&#x27;"}, {"fullname": "librus_apix.urls.ATTENDANCE_DETAILS_URL", "modulename": "librus_apix.urls", "qualname": "ATTENDANCE_DETAILS_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://synergia.librus.pl/przegladaj_nb/szczegoly/&#x27;"}, {"fullname": "librus_apix.urls.SCHEDULE_URL", "modulename": "librus_apix.urls", "qualname": "SCHEDULE_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://synergia.librus.pl/terminarz/&#x27;"}, {"fullname": "librus_apix.urls.HOMEWORK_URL", "modulename": "librus_apix.urls", "qualname": "HOMEWORK_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://synergia.librus.pl/moje_zadania&#x27;"}, {"fullname": "librus_apix.urls.HOMEWORK_DETAILS_URL", "modulename": "librus_apix.urls", "qualname": "HOMEWORK_DETAILS_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://synergia.librus.pl/moje_zadania/podglad/&#x27;"}, {"fullname": "librus_apix.urls.INFO_URL", "modulename": "librus_apix.urls", "qualname": "INFO_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://synergia.librus.pl/informacja&#x27;"}, {"fullname": "librus_apix.urls.COMPLETED_LESSONS_URL", "modulename": "librus_apix.urls", "qualname": "COMPLETED_LESSONS_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://synergia.librus.pl/zrealizowane_lekcje&#x27;"}, {"fullname": "librus_apix.urls.GATEWAY_API_ATTENDANCE", "modulename": "librus_apix.urls", "qualname": "GATEWAY_API_ATTENDANCE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://synergia.librus.pl/gateway/api/2.0/Attendances&#x27;"}, {"fullname": "librus_apix.urls.REFRESH_OAUTH_URL", "modulename": "librus_apix.urls", "qualname": "REFRESH_OAUTH_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://synergia.librus.pl/refreshToken&#x27;"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();